const {body, param} = require('express-validator')
const userModel = require('../models/userModel')

const createUserValidation = [
    body('fname')
    .exists()
    .withMessage("fname is required")
    .bail()
    .notEmpty()
    .withMessage("Please enter the value in fname")
    .bail()
    .isString()
    .withMessage("Please enter the fname in String")
    .bail()
    .isAlpha()
    .withMessage("Please enter alphabets only")
    .bail(),
    body('lname')
    .exists()
    .withMessage("lname is required")
    .bail()
    .notEmpty()
    .withMessage("Please enter the value in lname")
    .bail()
    .isString()
    .withMessage("Please enter the lname in String")
    .bail()
    .isAlpha()
    .withMessage("Please enter alphabets only")
    .bail(),
    body('email')
    .exists()
    .withMessage("email is required")
    .bail()
    .notEmpty()
    .withMessage("Please enter the value in email")
    .bail()
    .isString()
    .withMessage("Please enter the email in String")
    .bail()
    .isEmail()
    .withMessage('Invalid Email')
    .bail()
    .custom(value => {
        return userModel.findOne({email : value}).then(user => {
          if (user) {
            return Promise.reject('email value already in use')
          }
        })
    })
    .bail(),
    body('profileImage')
    .exists()
    .withMessage("profileImage is required")
    .bail()
    .notEmpty()
    .withMessage("Please enter the value in profileImage")
    .bail()
    .isString()
    .withMessage("Please enter the profileImage in String")
    .bail(),
    body('phone')
    .exists()
    .withMessage("phone is required")
    .bail()
    .notEmpty()
    .withMessage("Please enter the value in phone")
    .bail()
    .isString()
    .withMessage("Please enter the phone in String")
    .bail()
    .isMobilePhone('en-IN')
    .withMessage('Invalid phone Number')
    .bail()
    .custom(value => {
        return userModel.findOne({phone : value}).then(user => {
          if (user) {
            return Promise.reject('phone number already in use')
          }
        })
    })
    .bail(),
    body('password')
    .exists()
    .withMessage('password is required')
    .bail()
    .notEmpty()
    .withMessage('Please enter the value in password')
    .bail()
    .isString()
    .withMessage('Please enter the password in String')
    .bail()
    .isStrongPassword()
    .withMessage('Please enter the strong password')
    .bail(),
    body('address.shipping.street')
    .exists()
    .withMessage('address.shipping.street is required')
    .bail()
    .notEmpty()
    .withMessage('Please enter the value in address.shipping.street')
    .bail()
    .isString()
    .withMessage('Please enter the address.shipping.street in String')
    .isAlpha()
    .withMessage('Please enter the address.shipping.street in alphabets only.')
    .bail(),
    body('address.shipping.city')
    .exists()
    .withMessage('address.shipping.city is required')
    .bail()
    .notEmpty()
    .withMessage('Please enter the value in address.shipping.city')
    .bail()
    .isString()
    .withMessage('Please enter the address.shipping.city in String')
    .bail(),
    body('address.shipping.pincode')
    .exists()
    .withMessage('address.shipping.pincode is required')
    .bail()
    .notEmpty()
    .withMessage('Please enter the value in address.shipping.pincode')
    .bail()
    .isNumeric()
    .withMessage('Please enter the address.shipping.pincode in Number')
    .bail(),
    body('address.billing.street')
    .exists()
    .withMessage('address.billing.street is required')
    .bail()
    .notEmpty()
    .withMessage('Please enter the value in address.billing.street')
    .bail()
    .isString()
    .withMessage('Please enter the address.billing.street in String')
    .bail(),
    body('address.billing.city')
    .exists()
    .withMessage('address.billing.city is required')
    .bail()
    .notEmpty()
    .withMessage('Please enter the value in address.billing.city')
    .bail()
    .isString()
    .withMessage('Please enter the address.billing.city in String')
    .bail(),
    body('address.billing.pincode')
    .exists()
    .withMessage('address.billing.pincode is required')
    .bail()
    .notEmpty()
    .withMessage('Please enter the value in address.billing.pincode')
    .bail()
    .isNumeric()
    .withMessage('Please enter the address.billing.pincode in Number')
    .bail()
]

module.exports.createUserValidation = createUserValidation

const loginUserValidation = [
  body('email')
    .exists()
    .withMessage("email is required")
    .bail()
    .notEmpty()
    .withMessage("Please enter the value in email")
    .bail()
    .isString()
    .withMessage("Please enter the email in String")
    .bail()
    .isEmail()
    .withMessage('Invalid Email')
    .bail(),
  body('password')
    .exists()
    .withMessage('password is required')
    .bail()
    .notEmpty()
    .withMessage('Please enter the value in password')
    .bail()
    .isString()
    .withMessage('Please enter the password in String')
    .bail()
    .isStrongPassword()
    .withMessage('Please enter the strong password')
    .bail()
]

module.exports.loginUserValidation = loginUserValidation

const getUserValidation = [
  param('userId')
  .exists()
  .withMessage('userId is required.')
  .isMongoId()
  .withMessage('Please enter the valid userId.')
]

module.exports.getUserValidation = getUserValidation

const updateUserValidation = [
  param('userId')
  .exists()
  .withMessage('userId is required.')
  .isMongoId()
  .withMessage('Please enter the valid userId.'),
  body('fname')
    .optional()
    .bail()
    .notEmpty()
    .withMessage("Please enter the value in fname")
    .bail()
    .isString()
    .withMessage("Please enter the fname in String")
    .bail()
    .isAlpha()
    .withMessage("Please enter alphabets only")
    .bail(),
    body('lname')
    .optional()
    .bail()
    .notEmpty()
    .withMessage("Please enter the value in lname")
    .bail()
    .isString()
    .withMessage("Please enter the lname in String")
    .bail()
    .isAlpha()
    .withMessage("Please enter alphabets only")
    .bail(),
    body('email')
    .optional()
    .bail()
    .notEmpty()
    .withMessage("Please enter the value in email")
    .bail()
    .isString()
    .withMessage("Please enter the email in String")
    .bail()
    .isEmail()
    .withMessage('Invalid Email')
    .bail()
    .custom(value => {
        return userModel.findOne({email : value}).then(user => {
          if (user) {
            return Promise.reject('email value already in use')
          }
        })
    })
    .bail(),
    body('profileImage')
    .optional()
    .bail()
    .notEmpty()
    .withMessage("Please enter the value in profileImage")
    .bail()
    .isString()
    .withMessage("Please enter the profileImage in String")
    .bail(),
    body('phone')
    .optional()
    .bail()
    .notEmpty()
    .withMessage("Please enter the value in phone")
    .bail()
    .isString()
    .withMessage("Please enter the phone in String")
    .bail()
    .isMobilePhone('en-IN')
    .withMessage('Invalid phone Number')
    .bail()
    .custom(value => {
        return userModel.findOne({phone : value}).then(user => {
          if (user) {
            return Promise.reject('phone number already in use')
          }
        })
    })
    .bail(),
    body('password')
    .optional()
    .bail()
    .notEmpty()
    .withMessage('Please enter the value in password')
    .bail()
    .isString()
    .withMessage('Please enter the password in String')
    .bail()
    .isStrongPassword()
    .withMessage('Please enter the strong password')
    .bail(),
    body('address.shipping.street')
    .optional()
    .bail()
    .notEmpty()
    .withMessage('Please enter the value in address.shipping.street')
    .bail()
    .isString()
    .withMessage('Please enter the address.shipping.street in String')
    .isAlpha()
    .withMessage('Please enter the address.shipping.street in alphabets only.')
    .bail(),
    body('address.shipping.city')
    .optional()
    .bail()
    .notEmpty()
    .withMessage('Please enter the value in address.shipping.city')
    .bail()
    .isString()
    .withMessage('Please enter the address.shipping.city in String')
    .bail(),
    body('address.shipping.pincode')
    .optional()
    .bail()
    .notEmpty()
    .withMessage('Please enter the value in address.shipping.pincode')
    .bail()
    .isNumeric()
    .withMessage('Please enter the address.shipping.pincode in Number')
    .bail(),
    body('address.billing.street')
    .optional()
    .bail()
    .notEmpty()
    .withMessage('Please enter the value in address.billing.street')
    .bail()
    .isString()
    .withMessage('Please enter the address.billing.street in String')
    .bail(),
    body('address.billing.city')
    .optional()
    .bail()
    .notEmpty()
    .withMessage('Please enter the value in address.billing.city')
    .bail()
    .isString()
    .withMessage('Please enter the address.billing.city in String')
    .bail(),
    body('address.billing.pincode')
    .optional()
    .bail()
    .notEmpty()
    .withMessage('Please enter the value in address.billing.pincode')
    .bail()
    .isNumeric()
    .withMessage('Please enter the address.billing.pincode in Number')
    .bail()
]

module.exports.updateUserValidation = updateUserValidation